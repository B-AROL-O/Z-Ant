name: Zig Codegen Tests

on:
  push:
    branches: [main, feature, codegen, graphZant]
  pull_request:
    branches: [main, feature, codegen, graphZant]
  workflow_dispatch:

jobs:
  setup-models:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Generate ONNX test models
        run: python3 tests/CodeGen/Python-ONNX/onnx_gen.py

      - name: Upload generated models
        uses: actions/upload-artifact@v4
        with:
          name: onnx-models
          path: |
            datasets/
            oneop_models/
          retention-days: 1

  test-oneop:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        operation: [Add, Conv, MatMul, Relu, Softmax]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Zig 0.14.0
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Generate OneOp codegen for ${{ matrix.operation }}
        run: zig build op-codegen-gen -Dop=${{ matrix.operation }}

      - name: Test OneOp codegen for ${{ matrix.operation }}
        run: zig build op-codegen-test -Dop=${{ matrix.operation }} --summary all

  test-lib-generation:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        model: [mnist-8, resnet50]
        version: [v1, v2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Set up Zig 0.14.0
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Generate test data for ${{ matrix.model }}
        run: ./zant user_tests_gen --model ${{ matrix.model }}

      - name: Generate library code for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib-gen -Dmodel=${{ matrix.model }} -Dv=${{ matrix.version }} -Denable_user_tests=true -Dcomm=true

      - name: Test generated library for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib-test -Dmodel=${{ matrix.model }} -Denable_user_tests=true --summary all

      - name: Build static library for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib -Dmodel=${{ matrix.model }} --summary all

  test-extractor:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        model: [mnist-8]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Set up Zig 0.14.0
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Extract nodes from ${{ matrix.model }}
        run: ./zant onnx_extract --path datasets/models/${{ matrix.model }}/${{ matrix.model }}.onnx

      - name: Generate extractor tests for ${{ matrix.model }}
        run: zig build extractor-gen -Dmodel=${{ matrix.model }}

      - name: Run extractor tests for ${{ matrix.model }}
        run: zig build extractor-test -Dmodel=${{ matrix.model }} --summary all

  test-cross-platform:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        target: [x86_64-linux, aarch64-linux, x86_64-windows]
        optimize: [Debug, ReleaseFast]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Zig 0.14.0
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Generate library code for cross-platform test
        run: zig build lib-gen -Dmodel=mnist-8 -Dv=v2

      - name: Build library for ${{ matrix.target }} with ${{ matrix.optimize }}
        run: zig build lib -Dmodel=mnist-8 -Dtarget=${{ matrix.target }} -Doptimize=${{ matrix.optimize }} --summary all
